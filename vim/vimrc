" Author: Pepe García <pepe@garhdez.com>
" Inspiration: Steve Losh, Scroolose, dkpw, tpope...

" BASIC CONFIGURATION ------------------------------------------------------ {{{

" Basics ------------------------------------------------------------------- {{{
execute pathogen#infect()
set t_Co=256
let mapleader = "\<space>"
set relativenumber
set number
nnoremap H 0
nnoremap L $
filetype on
filetype plugin on
filetype plugin indent on
set mouse=a
set comments=sr:/*,mb:*,ex:*/
set smartindent
set encoding=utf-8
set cursorline
set shiftwidth=4
set softtabstop=4
set tabstop=4
set cindent
set autoindent
set encoding=utf-8
set modelines=0
set showmode
set showcmd
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set history=1000
"set undofile
"set undoreload=10000
set list
set listchars=tab:·\ ,extends:❯,precedes:❮
set shell=/bin/bash
set lazyredraw
set matchtime=3
set showbreak=↪
set splitbelow
set splitright
set fillchars=diff:⣿,vert:│
set title
set wrap
set incsearch
set ignorecase
"set textwidth=80
set formatoptions=qrn1
au VimResized * exe "normal! \<c-w>="
" }}}
" Folds -------------------------------------------------------------------- {{{
set foldlevelstart=99
set foldmethod=marker

" From Steve Losh's
function! MyFoldText() " {{{
	let line = getline(v:foldstart)

	let nucolwidth = &fdc + &number * &numberwidth
	let windowwidth = winwidth(0) - nucolwidth - 3
	let foldedlinecount = v:foldend - v:foldstart

	" expand tabs into spaces
	let onetab = strpart('          ', 0, &tabstop)
	let line = substitute(line, '\t', onetab, 'g')

	let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
	let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
	return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

set nowrap

" }}}
" Appearance --------------------------------------------------------------- {{{

set wildmenu

syntax on

set background=light
colors molokai

if has("gui_running")
	colors solarized
	map <F1> :set invfu<CR>
	set guioptions-=egt
	set guioptions=LR
	set guioptions-=LR

	if has("unix")
		let s:uname = system("uname")
		if s:uname == "Darwin\n"
			set guifont=Monaco:h16
		else
			set guifont=Inconsolata\ for\ Powerline\ 14
		endif
	endif
else
	set term=screen-256color
endif

function! SL(function)
  if exists('*'.a:function)
    return call(a:function,[])
  else
    return ''
  endif
endfunction

au InsertEnter * hi StatusLine guibg=green
au InsertLeave * hi StatusLine guibg=grey

" }}}
" Backup ------------------------------------------------------------------- {{{
" backup to ~/.tmp
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
" }}}

" }}}
" PLUGIN STUFF ------------------------------------------------------------- {{{

" Pathogen ----------------------------------------------------------------- {{{
call pathogen#infect()
" }}}
" Nerdtree ----------------------------------------------------------------- {{{
map <F2> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\.pyc$', '\.o$', '\.hi$']
let NERDTreeMapActivateNode='<space>'
"}}}
" Syntastic ---------------------------------------------------------------- {{{
let g:syntastic_disabled_filetypes=['java']
function! s:SaveAll()
	w | :Error
endfunction

command! -bar -narg=0 W call s:SaveAll()
let g:syntastic_phpcs_disable = 0
let g:syntastic_php_checkers=['php', 'phpcs']
let g:syntastic_java_checkers=[]
let g:syntastic_css_checkers=['csslint']
let g:syntastic_php_phpcs_args = "--standard=PSR2"
let g:syntastic_javascript_checkers=['jslint']
let g:syntastic_python_checkers=['flake8']

nnoremap <f6> :Errors<cr>

" }}}
" Tagbar ------------------------------------------------------------------- {{{
nmap <F8> :TagbarToggle<CR>
let g:tagbar_phpctags_bin='~/phpctags/phpctags'
" }}}
" Gundo -------------------------------------------------------------------- {{{
nmap <F5> :GundoToggle<CR>
" }}}
" ctrlp-vim ---------------------------------------------------------------- {{{
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = '\v%(/\.%(git|hg|svn)|\.%(csv|json|class|o|png|jpg|jpeg|bmp|tar|jar|tgz|deb|zip|xml|html)$|/target/%(quickfix|resolution-cache|streams)|/target/scala-2.10/%(classes|test-classes|sbt-0.13|cache)|/project/target|/project/project|.gradle|.ensime)'
" }}}
" tabular ------------------------------------------------------------------ {{{
vnoremap <leader>t :Tabularize
" }}}
" pdv ---------------------------------------------------------------------- {{{
let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates"
" }}}
" buffergator -------------------------------------------------------------- {{{
let g:buffergator_autoexpand_on_split = 0
" }}}
" ultisnips ---------------------------------------------------------------- {{{
let g:UltiSnipsExpandTrigger="<tab>"                                            
let g:UltiSnipsJumpForwardTrigger="<tab>"                                       
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" }}}
" Vim2Hs ------------------------------------------------------------------- {{{
let g:haskell_conceal              = 0
let g:haskell_conceal_enumerations = 0
" }}}

" }}}
" MAPPINGS ----------------------------------------------------------------- {{{

" folding mappings --------------------------------------------------------- {{{
nnoremap <leader><leader> za
vnoremap <leader><leader> za
" }}}
" movement mappings -------------------------------------------------------- {{{

map <tab> %

nnoremap D d$

nnoremap n nzzzv
nnoremap N Nzzzv

map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

nmap <silent> <Up> :wincmd k<CR>
nmap <silent> <Down> :wincmd j<CR>
nmap <silent> <Left> :wincmd h<CR>
nmap <silent> <Right> :wincmd l<CR>

nmap <c-j> jzz
nmap <c-k> kzz

"}}}
" editor mappings ---------------------------------------------------------- {{{

" desmapeamos la ayuda de VIM del <f1>
inoremap <F1> <nop>
" permite ejecutar w!! para guardar ficheros de sólo lectura
cmap w!! w !sudo tee % >/dev/null

inoremap " ""<left>
inoremap "" "
inoremap [ []<left>
inoremap [[ [
inoremap [] []
inoremap ( ()<left>
inoremap () ()
inoremap (( (
inoremap { {}<left>
inoremap {} {}
inoremap {{ {

" i forgot how to Vim
command! Q quit

" volver a seleccionar despues de indentar
vnoremap < <gv
vnoremap > >gv

" Evitamos typos:
nnoremap ; :
nnoremap ñ :
nnoremap Ñ :
command! W write

" Search highlight toggle
nnoremap <F4> :set hlsearch! hlsearch?<CR>

" Pastetoggle
set pastetoggle=<F3>

" Formatea todo el archivo
nnoremap <leader>fef mtgg=G't

" Cambia a uppercase una cadena ( por ejemplo, constantes )
nnoremap <C-u> gUiw
inoremap <C-u> gUiwea

"busca la palabra resaltada
vnoremap <silent> * :<C-U>
	\let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
	\gvy/<C-R><C-R>=substitute(
	\escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
	\gV:call setreg('"', old_reg, old_regtype)<CR>

"busca la palabra resaltada hacia detrás
vnoremap <silent> # :<C-U>
	\let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
	\gvy?<C-R><C-R>=substitute(
	\escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
	\gV:call setreg('"', old_reg, old_regtype)<CR>

" }}}
" leader mappings ---------------------------------------------------------- {{{

" Eliminar los espacios en blanco al final de linea
nnoremap <leader>w mz:%s/\s\+$//<cr>:let @/=''<cr>`z

" Gist
vnoremap <leader>ug :w !gist -p \| pbcopy<cr>

" Abrimos nuestro archivo VIMRC.
map <leader>vrc <esc>:vnew<cr>:e ~/.vimrc<cr>

" }}}
" Typos -------------------------------------------------------------------- {{{
"Shitty finnish layout, DIE!
inoremap <D-º> \
" }}}

" }}}
" LANGUAGE SPECIFIC -------------------------------------------------------- {{{

" PHP ---------------------------------------------------------------------- {{{
augroup ft_php
	au!
	nnoremap <leader>P :!open http://www.php.net/<cword><cr>
	au FileType php setlocal foldmethod=syntax
	au FileType php setlocal expandtab
	au FileType php setlocal tabstop=4
	au FileType php setlocal keywordprg=pman
	au FileType php nnoremap <leader>p call PhpDocSingle()<CR>
augroup END

" }}}
" HTML --------------------------------------------------------------------- {{{
augroup ft_html
	au!
	au FileType xhtml,html,htm so ~/.vim/ftplugin/html_autoclosetag.vim
augroup END
" }}}
" XML ---------------------------------------------------------------------- {{{
augroup ft_html
	au!
	au FileType xml so ~/.vim/ftplugin/html_autoclosetag.vim
augroup END
" }}}
" JAVASCRIPT --------------------------------------------------------------- {{{
augroup ft_js
	au!
	au FileType javascript setlocal foldmethod=marker
	au Filetype javascript setlocal foldmarker={,}
	au FileType javascript setlocal expandtab
	au FileType javascript setlocal tabstop=2
augroup END
"}}}
" JAVA --------------------------------------------------------------------- {{{
augroup ft_java
	au!
	au Filetype java setlocal smartindent
	au Filetype java setlocal tabstop=4
	au Filetype java setlocal shiftwidth=4
	au Filetype java setlocal expandtab
	au Filetype java setlocal foldmethod=syntax
augroup END
" }}}
" PYTHON ------------------------------------------------------------------- {{{
augroup ft_python
	au!
	au Filetype python setlocal smartindent
	au Filetype python setlocal tabstop=4
	au Filetype python setlocal shiftwidth=4
	au Filetype python setlocal expandtab
	au Filetype python setlocal foldmethod=syntax
augroup END
" }}}
" HASKELL ------------------------------------------------------------------ {{{
augroup ft_haskell
	au!
	au Filetype haskell setlocal smartindent
	au Filetype haskell setlocal tabstop=4
	au Filetype haskell setlocal shiftwidth=4
	au Filetype haskell setlocal expandtab
augroup END
" }}}
" VAGRANT ------------------------------------------------------------------ {{{
augroup ft_vagrant
	au!
	au BufRead,BufNewFile Vagrantfile set ft=ruby
augroup END
" }}}
" MAN ---------------------------------------------------------------------- {{{
augroup ft_man
	au!
	au FileType man setlocal foldmethod=indent
augroup END
" }}}
" GO ----------------------------------------------------------------------- {{{
augroup ft_go
	au!
	au BufRead,BufNewFile *.go set filetype=go
	au FileType go set rtp+=/usr/local/go/misc/vim
	au FileType go filetype plugin indent on
augroup END
let g:go_fmt_command="goimports"
" }}}
" MARKDOWN ----------------------------------------------------------------- {{{
augroup ft_markdown
	au!

	au BufNewFile,BufRead *.md setlocal filetype=markdown foldlevel=1

	" Use <localleader>1/2/3 to add headings.
	au Filetype markdown nnoremap <buffer> <leader>1 yypVr=:redraw<cr>
	au Filetype markdown nnoremap <buffer> <leader>2 yypVr-:redraw<cr>
	au FileType markdown set textwidth=80
	au Filetype markdown nnoremap <buffer> <leader>3 mzI###<ESC>
augroup END
" }}}
" COFFEESCRIPT ------------------------------------------------------------- {{{
augroup ft_coffeescript
	au!
	au FileType coffee setlocal expandtab
	au FileType coffee setlocal tabstop=2
	au FileType coffee command! CoffeeGenerate call CoffeeGenerate()
	au FileType coffee set shiftwidth=2
	au FileType coffee set autoread
	au FileType coffee set softtabstop=2
	au BufNewFile,BufReadPost *.coffee setl foldmethod=indent
	au BufWritePost *.coffee silent CoffeeGenerate
augroup END
" }}}
" CLOJURE ------------------------------------------------------------------ {{{

let g:clojure_fold_extra = [
            \ 'defgauge',
            \ 'defmeter',
            \ 'defhistogram',
            \ 'defcounter',
            \ 'deftimer',
            \
            \ 'defdb',
            \ 'defentity',
            \ 'defaspect',
            \ 'add-aspect',
            \ 'defmigration',
            \
            \ 'defsynth',
            \ 'definst',
            \ 'defproject',
            \
            \ 'defroutes',
            \
            \ 'defrec',
            \
            \ 'defparser',
            \
            \ 'defform',
            \ 'defform-',
            \
            \ 'defpage',
            \ 'defsketch'
            \
            \ ]

let g:clojure_highlight_extra_defs = [
            \ 'defparser',
            \
            \ 'defproject',
            \
            \ 'defroutes'
            \ ]

augroup ft_clojure
	au!
	au FileType clojure setlocal expandtab
	au FileType clojure setlocal tabstop=2
	au FileType clojure set shiftwidth=2
	au FileType clojure set softtabstop=2
	au FileType clojure map <leader><leader> :Eval<cr>
	au FileType clojure silent! call TurnOnClojureFolding()
augroup END
" }}}
" SCALA -------------------------------------------------------------------- {{{
augroup ft_scala
	au!
	au FileType scala setlocal expandtab
	au FileType scala setlocal tabstop=2
	au FileType scala set shiftwidth=2
	au FileType scala set softtabstop=2
augroup END
" }}}
" TWIG---------------------------------------------------------------------- {{{
augroup ft_twig
	au!
	au BufNewFile,BufRead *.twig setlocal filetype=jinja foldlevel=1
augroup END
" }}}
" SBT ---------------------------------------------------------------------- {{{
augroup ft_sbt
	au!
	au BufNewFile,BufRead *.sbt setlocal filetype=sbt
augroup END
" }}}

" }}}
" FUNCTIONS ---------------------------------------------------------------- {{{
function! HighlightAnnotations() " {{{
	syn keyword phpKeyword contained namespace use
endfunction

autocmd Syntax * call HighlightAnnotations() " }}}
" }}}
